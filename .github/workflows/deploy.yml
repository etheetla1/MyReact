name: Deploy to S3

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build project
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Sync to S3
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: knowelist.com
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: dist

      - name: Configure S3 for SPA routing
        run: |
          # Set up proper S3 website configuration for SPA
          aws s3 website s3://knowelist.com --index-document index.html --error-document 404.html
          
          # Wait a moment for sync to complete
          sleep 5
          
          # Set proper cache headers for HTML files (only if they exist)
          if aws s3 ls s3://knowelist.com/index.html; then
            aws s3 cp s3://knowelist.com/index.html s3://knowelist.com/index.html \
              --metadata-directive REPLACE \
              --cache-control "no-cache, no-store, must-revalidate" \
              --content-type "text/html"
          fi
          
          if aws s3 ls s3://knowelist.com/404.html; then
            aws s3 cp s3://knowelist.com/404.html s3://knowelist.com/404.html \
              --metadata-directive REPLACE \
              --cache-control "no-cache, no-store, must-revalidate" \
              --content-type "text/html"
          fi
          
          # Set long cache for assets (only if assets directory exists)
          if aws s3 ls s3://knowelist.com/assets/ --recursive | head -1; then
            aws s3 cp s3://knowelist.com/assets/ s3://knowelist.com/assets/ \
              --recursive \
              --metadata-directive REPLACE \
              --cache-control "public, max-age=31536000, immutable"
          fi

      - name: Invalidate CloudFront (if applicable)
        run: |
          # Add CloudFront invalidation if you have a distribution
          # aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"
          echo "CloudFront invalidation skipped - add distribution ID if needed"
